{"version":3,"sources":["components/RegistrationForm/RegistrationForm.jsx","components/app/app.jsx","serviceWorker.js","index.jsx"],"names":["idCounter","uniqueId","validationSchema","Yup","name","max","required","password","min","matches","confirmPassword","oneOf","email","website","url","age","integer","skills","of","acceptTerms","getSkills","values","push","remove","replace","className","map","index","id","key","value","onChange","target","onClick","returnHandleSubmit","a","setStatus","skillsArr","reduce","acc","skill","result","fetch","method","headers","body","JSON","stringify","response","json","code","message","RegistrationForm","initialValues","onSubmit","handleSubmit","handleChange","handleBlur","status","htmlFor","placeholder","maxLength","onBlur","component","Password","type","render","checked","htmlType","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.71f3f7d6.chunk.js","sourcesContent":["import \"./RegistrationForm.scss\";\r\nimport React from \"react\";\r\nimport { Formik, FieldArray, ErrorMessage } from \"formik\";\r\nimport { Input, Checkbox, Button } from \"antd\"; // Space\r\nimport * as Yup from \"yup\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst NAME = \"name\";\r\nconst PASSWORD = \"password\";\r\nconst CONFIRM_PASSWORD = \"confirmPassword\";\r\nconst EMAIL = \"email\";\r\nconst WEBSITE = \"website\";\r\nconst AGE = \"age\";\r\nconst SKILLS = \"skills\";\r\nconst ACCEPT_TERMS = \"acceptTerms\";\r\nconst MIN_AGE = 18;\r\nconst MAX_AGE = 65;\r\nconst passRegExp = /^(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]/;\r\nconst uniqueId = ((idCounter) => () => {\r\n  // eslint-disable-next-line no-param-reassign\r\n  idCounter += 1;\r\n  return idCounter;\r\n})(0);\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string().max(50, \"To Long!\").required(\"Required\"),\r\n  password: Yup.string()\r\n    .min(8, \"To Short!\")\r\n    .max(40, \"To Long!\")\r\n    .matches(\r\n      passRegExp,\r\n      \"Latin letters and numbers, at least one number and one capital letter\"\r\n    )\r\n    .required(\"Required\"),\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref(PASSWORD), null], \"Password must mutch\")\r\n    .required(\"Required\"),\r\n  email: Yup.string().email().required(\"Required\"),\r\n  website: Yup.string().url(),\r\n  age: Yup.number().integer().min(MIN_AGE).max(MAX_AGE).required(\"Required\"),\r\n  // skills: Yup.array().of(Yup.object()),\r\n  skills: Yup.array().of(Yup.object()),\r\n  acceptTerms: Yup.bool().oneOf([true], \"Need to accept\"),\r\n});\r\n\r\nconst getSkills = (values) => ({ push, remove, replace }) => {\r\n  return (\r\n    <>\r\n      <div className=\"skills-container\">\r\n        {values.skills.map(({ name = \"\", id = uniqueId() }, index) => (\r\n          <div key={id} className=\"skills-skill\">\r\n            <Input\r\n              name={SKILLS}\r\n              value={name}\r\n              onChange={({ target: { value } }) => {\r\n                replace(index, { id, name: value });\r\n              }}\r\n            />\r\n            <Button\r\n              onClick={() => {\r\n                remove(index);\r\n              }}\r\n            >\r\n              -\r\n            </Button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <Button onClick={() => push({})}>Add a skill</Button>\r\n    </>\r\n  );\r\n};\r\n\r\ngetSkills.propTypes = {\r\n  push: PropTypes.func.isRequired,\r\n  remove: PropTypes.func.isRequired,\r\n  replace: PropTypes.func.isRequired,\r\n};\r\n\r\nconst returnHandleSubmit = async (values, { setStatus }) => {\r\n  const skillsArr = values.skills.reduce((acc, skill) => {\r\n    if (skill.name) {\r\n      acc.push(skill.name);\r\n    }\r\n    return acc;\r\n  }, []);\r\n  const result = { ...values, skills: skillsArr };\r\n  try {\r\n    const response = await fetch(\"http://127.0.0.1:4000/sign-up\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json;charset=utf-8\",\r\n      },\r\n      body: JSON.stringify(result),\r\n    });\r\n    const { code, message } = await response.json();\r\n    if (code === 0) {\r\n      setStatus({ email: message });\r\n    }\r\n    if (code === 1) {\r\n      setStatus({ message });\r\n    }\r\n  } catch (error) {\r\n    setStatus({ message: \"Error: contact administrator\" });\r\n  }\r\n};\r\nexport const RegistrationForm = () => {\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        email: \"\",\r\n        website: \"\",\r\n        age: \"\",\r\n        skills: [{}],\r\n        acceptTerms: false,\r\n      }}\r\n      validationSchema={validationSchema}\r\n      onSubmit={returnHandleSubmit}\r\n    >\r\n      {({ handleSubmit, handleChange, handleBlur, values, status }) => {\r\n        return (\r\n          <form className=\"form\" onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor={NAME}>Name</label>\r\n              <Input\r\n                id={NAME}\r\n                name={NAME}\r\n                placeholder=\"Name\"\r\n                maxLength={50}\r\n                value={values[NAME]}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n              />\r\n              <ErrorMessage component=\"div\" name={NAME} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor={PASSWORD}>Password</label>\r\n              <Input.Password\r\n                id={PASSWORD}\r\n                name={PASSWORD}\r\n                placeholder=\"Password\"\r\n                maxLength={40}\r\n                value={values[PASSWORD]}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n              />\r\n              <ErrorMessage name={PASSWORD} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor={CONFIRM_PASSWORD}>Confirm password</label>\r\n              <Input.Password\r\n                id={CONFIRM_PASSWORD}\r\n                name={CONFIRM_PASSWORD}\r\n                placeholder=\"Confirm password\"\r\n                maxLength={40}\r\n                value={values[CONFIRM_PASSWORD]}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n              />\r\n              <ErrorMessage name={CONFIRM_PASSWORD} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor={EMAIL}>Email</label>\r\n              <Input\r\n                id={EMAIL}\r\n                name={EMAIL}\r\n                placeholder=\"email\"\r\n                value={values[EMAIL]}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n              />\r\n              {status && status.email ? (\r\n                <div>{status.email}</div>\r\n              ) : (\r\n                <ErrorMessage name={EMAIL} />\r\n              )}\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor={WEBSITE}>Website</label>\r\n              <Input\r\n                id={WEBSITE}\r\n                name={WEBSITE}\r\n                placeholder=\"Website\"\r\n                value={values[WEBSITE]}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n              />\r\n              <ErrorMessage name={WEBSITE} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor={AGE}>Age</label>\r\n              <Input\r\n                id={AGE}\r\n                name={AGE}\r\n                type=\"number\"\r\n                placeholder=\"Age\"\r\n                value={values[AGE]}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n              />\r\n              <ErrorMessage name={AGE} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <span className=\"skills-label\">Skills</span>\r\n              <FieldArray name={SKILLS} render={getSkills(values)} />\r\n              <ErrorMessage name={SKILLS} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <Checkbox\r\n                id={ACCEPT_TERMS}\r\n                name={ACCEPT_TERMS}\r\n                checked={values[ACCEPT_TERMS]}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n              >\r\n                Accept Terms\r\n              </Checkbox>\r\n              <ErrorMessage name={ACCEPT_TERMS} />\r\n            </div>\r\n\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n            </Button>\r\n            {status && status.message && <div>{status.message}</div>}\r\n          </form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { RegistrationForm } from \"../RegistrationForm\";\r\nimport \"./app.css\";\r\n\r\nexport function App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <RegistrationForm />\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./index.css\";\r\nimport { App } from \"./components/app/app\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}